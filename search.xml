<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Spring AOP原理及源码学习</title>
    <url>/2021/03/08/Spring-AOP%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="AOP底层原理之一（动态代理Demo）："><a href="#AOP底层原理之一（动态代理Demo）：" class="headerlink" title="AOP底层原理之一（动态代理Demo）："></a>AOP底层原理之一（动态代理Demo）：</h2><p>Demo所解决的问题场景：有一个计算器，需要在其内部的所有计算方法中打印日志，乍一看这个需求可以简单粗暴的来实现，在每个计算方法中加上相应的日志就完成了，但是如方法非常多我们需要加日志的地方就非常多，这样工作量就会很大，下面是使用动态代理来实现这一过程。</p>
<h3 id="计算器接口及计算器实现类"><a href="#计算器接口及计算器实现类" class="headerlink" title="计算器接口及计算器实现类"></a>计算器接口及计算器实现类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiangxiang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-03-07 22:13</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Calculator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiangxiang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-03-08 19:17</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyCalculator</span> <span class="keyword">implements</span> <span class="title">Calculator</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a / b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代理工具类"><a href="#代理工具类" class="headerlink" title="代理工具类"></a>代理工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiangxiang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-03-07 22:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyUtil</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calculator <span class="title">getProxy</span><span class="params">(Calculator calculat)</span> </span>&#123;</span><br><span class="line">        InvocationHandler invocationHandler = <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                Object result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    LogUtil.preLog(method, args);</span><br><span class="line">                    result = method.invoke(calculat, args);</span><br><span class="line">                    LogUtil.afterLog(method, args);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    LogUtil.ExceptionLog(method, args);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        ClassLoader classLoader = calculat.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = calculat.getClass().getInterfaces();</span><br><span class="line">        Object proxy = Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> (Calculator) proxy;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="日志工具类"><a href="#日志工具类" class="headerlink" title="日志工具类"></a>日志工具类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> xiangxiang</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2020-03-07 22:21</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">preLog</span><span class="params">(Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(method.getName() + <span class="string">&quot;执行前&quot;</span> + <span class="string">&quot;参数为&quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">afterLog</span><span class="params">(Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(method.getName() + <span class="string">&quot;执行后&quot;</span> + <span class="string">&quot;参数为&quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">ExceptionLog</span><span class="params">(Method method, Object[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(method.getName() + <span class="string">&quot;执行异常了&quot;</span> + <span class="string">&quot;参数为&quot;</span> + Arrays.toString(args));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="AOP专业术语："><a href="#AOP专业术语：" class="headerlink" title="AOP专业术语："></a>AOP专业术语：</h2><h2 id="如何将切面类中的这些方法（通知方法）动态的在目标方法运行的各个位置切入"><a href="#如何将切面类中的这些方法（通知方法）动态的在目标方法运行的各个位置切入" class="headerlink" title="如何将切面类中的这些方法（通知方法）动态的在目标方法运行的各个位置切入"></a>如何将切面类中的这些方法（通知方法）动态的在目标方法运行的各个位置切入</h2><p>1.将目标类和切面类（封装了通知方法（在目标方法执行前后执行的方法））加入到IOC容器；<br>2.还应该告诉Spring哪个类是切面类@Aspect;<br>3.告诉Spring每个方法都什么时候执行；<br>@Before 在目标方法之前执行<br>@After 在目标方法结束之后执行<br>@AfterReturning 在目标方法正常返回之后执行<br>@AfterThrowing 在目标方法抛出异常之后执行<br>切入点表达式：execution(访问权限 返回值类型 方法全限定类名)</p>
<p>IoC中保存的是的组件是它的代理对象，代理对象与目标对象的唯一关联关系是实现了同一个接口；<br>cglib为什么没有接口的组件也可以创键代理对象<br>cglib在目标类中创键了一个内部类，帮我们创键好了代理对象<br>细节二：切入点表达是通配符<br>细节三：通知方法的执行顺序<br>细节四：</p>
<p>多切面</p>
<p>AOP的使用场景：<br>1.AOP加日志<br>2.AOP权限验证<br>3.AOP做安全检查<br>4.AOP做事务控制</p>
]]></content>
      <tags>
        <tag>AOP</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring IOC原理及源码学习</title>
    <url>/2021/03/10/Spring-IOC%E5%8E%9F%E7%90%86%E5%8F%8A%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Spring MVC 源码学习</title>
    <url>/2021/03/08/Spring-MVC-%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<p>Spring MVC请求处理的流程(以下源码中注释了每一步干了那些事情)<br><img src="/images/MVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doDispatch</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        HttpServletRequest processedRequest = request;</span><br><span class="line">        HandlerExecutionChain mappedHandler = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">boolean</span> multipartRequestParsed = <span class="keyword">false</span>;</span><br><span class="line">        WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ModelAndView mv = <span class="keyword">null</span>;</span><br><span class="line">                Object dispatchException = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 1.检查是否是文件上传请求</span></span><br><span class="line">                    processedRequest = <span class="keyword">this</span>.checkMultipart(request);</span><br><span class="line">                    multipartRequestParsed = processedRequest != request;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 2.找到处理当前请求的处理器</span></span><br><span class="line">                    mappedHandler = <span class="keyword">this</span>.getHandler(processedRequest);</span><br><span class="line">                    <span class="keyword">if</span> (mappedHandler == <span class="keyword">null</span>) &#123;</span><br><span class="line">                        <span class="comment">// 如果没有找到则直接抛异常</span></span><br><span class="line">                        <span class="keyword">this</span>.noHandlerFound(processedRequest, response);</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// 3.拿到当前处理器所有方法的适配器（相当于反射工具）</span></span><br><span class="line">                    HandlerAdapter ha = <span class="keyword">this</span>.getHandlerAdapter(mappedHandler.getHandler());</span><br><span class="line">                    <span class="comment">// 4.获取到方法的请求方式</span></span><br><span class="line">                    String method = request.getMethod();</span><br><span class="line">                    <span class="keyword">boolean</span> isGet = <span class="string">&quot;GET&quot;</span>.equals(method);</span><br><span class="line">                    <span class="keyword">if</span> (isGet || <span class="string">&quot;HEAD&quot;</span>.equals(method)) &#123;</span><br><span class="line">                        <span class="keyword">long</span> lastModified = ha.getLastModified(request, mappedHandler.getHandler());</span><br><span class="line">                        <span class="keyword">if</span> ((<span class="keyword">new</span> ServletWebRequest(request, response)).checkNotModified(lastModified) &amp;&amp; isGet) &#123;</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 5.使用适配器执行目标将目标方法执行完后的返回值作为视图名，不管目标方法是何种类型的返回值，最终适配器执行完后都是将执行后的信息封装到ModelAndView中并返回，</span></span><br><span class="line">                    mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br><span class="line">                    <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"></span><br><span class="line">                    <span class="comment">// 6.如果没有视图名称返回一个默认的视图名称</span></span><br><span class="line">                    <span class="keyword">this</span>.applyDefaultViewName(processedRequest, mv);</span><br><span class="line">                    mappedHandler.applyPostHandle(processedRequest, response, mv);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception var20) &#123;</span><br><span class="line">                    dispatchException = var20;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Throwable var21) &#123;</span><br><span class="line">                    dispatchException = <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler dispatch failed&quot;</span>, var21);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 7.将方法最终执行完成后的ModelAndView转发到对应的页面，而且ModelAndView中的数据可以在请求域中获取</span></span><br><span class="line">                <span class="keyword">this</span>.processDispatchResult(processedRequest, response, mappedHandler, mv, (Exception)dispatchException);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception var22) &#123;</span><br><span class="line">                <span class="keyword">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, var22);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable var23) &#123;</span><br><span class="line">                <span class="keyword">this</span>.triggerAfterCompletion(processedRequest, response, mappedHandler, <span class="keyword">new</span> NestedServletException(<span class="string">&quot;Handler processing failed&quot;</span>, var23));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mappedHandler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (multipartRequestParsed) &#123;</span><br><span class="line">                <span class="keyword">this</span>.cleanupMultipart(processedRequest);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>结合源码详细解析一下上述主要步骤：<br>// 2.如何找到处理当前请求的处理器<br>mappedHandler = this.getHandler(processedRequest)返回目标方法的执行链（内部还封装了拦截器等信息）<br>handlerMappings:IOC容器启动时创键Controller对象扫描到每个处理器都能处理那些请求，保存在HanlerMaping的handlerMap中，每过来一个请求，拿到该请求对应的HandlerMapping的请求映射信息就行；<br>下面这段就是根据请求获取请求对应的HandlerMapping映射信息的源码<br>（目前MVC支持RequestMappingHandlerMapping、 BeanNameUrlHandlerMapping、 RouterFunctionMapping三种)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> HandlerExecutionChain <span class="title">getHandler</span><span class="params">(HttpServletRequest request)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handlerMappings != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (HandlerMapping mapping : <span class="keyword">this</span>.handlerMappings) &#123;</span><br><span class="line">                HandlerExecutionChain handler = mapping.getHandler(request);</span><br><span class="line">                <span class="keyword">if</span> (handler != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> handler;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


<p>// 3.如何拿到当前处理器所有方法的适配器（相当于反射工具）<br>（目前MVC支持RequestMappingHandlerAdapter、 HandlerFunctionAdapter、 HttpRequestHandlerAdapter、 SimpleControllerHandlerAdapter四种)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> HandlerAdapter <span class="title">getHandlerAdapter</span><span class="params">(Object handler)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.handlerAdapters != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (HandlerAdapter adapter : <span class="keyword">this</span>.handlerAdapters) &#123;</span><br><span class="line">                <span class="keyword">if</span> (adapter.supports(handler)) &#123;</span><br><span class="line">                    <span class="keyword">return</span> adapter;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> ServletException(<span class="string">&quot;No adapter for handler [&quot;</span> + handler +</span><br><span class="line">                <span class="string">&quot;]: The DispatcherServlet configuration needs to include a HandlerAdapter that supports this handler&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>DispatcherServlet中的几种引用类型的属性：Spring MVC的九大组件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** MultipartResolver used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> MultipartResolver multipartResolver;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/** LocaleResolver used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> LocaleResolver localeResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** ThemeResolver used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> ThemeResolver themeResolver;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of HandlerMappings used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerMapping&gt; handlerMappings;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of HandlerAdapters used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerAdapter&gt; handlerAdapters;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of HandlerExceptionResolvers used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;HandlerExceptionResolver&gt; handlerExceptionResolvers;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** RequestToViewNameTranslator used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> RequestToViewNameTranslator viewNameTranslator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** FlashMapManager used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> FlashMapManager flashMapManager;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** List of ViewResolvers used by this servlet. */</span></span><br><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">private</span> List&lt;ViewResolver&gt; viewResolvers;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Spring MVC九大组件初始化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * This implementation calls &#123;<span class="doctag">@link</span> #initStrategies&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onRefresh</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        initStrategies(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Initialize the strategy objects that this servlet uses.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">initStrategies</span><span class="params">(ApplicationContext context)</span> </span>&#123;</span><br><span class="line">        initMultipartResolver(context);</span><br><span class="line">        initLocaleResolver(context);</span><br><span class="line">        initThemeResolver(context);</span><br><span class="line">        initHandlerMappings(context);</span><br><span class="line">        initHandlerAdapters(context);</span><br><span class="line">        initHandlerExceptionResolvers(context);</span><br><span class="line">        initRequestToViewNameTranslator(context);</span><br><span class="line">        initViewResolvers(context);</span><br><span class="line">        initFlashMapManager(context);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>





<p>MVC支持Rest风格原理(源码解析)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DEFAULT_METHOD_PARAM = <span class="string">&quot;_method&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String methodParam = DEFAULT_METHOD_PARAM;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">    HttpServletRequest requestToUse = request;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="keyword">null</span>) &#123;</span><br><span class="line">        String paramValue = request.getParameter(<span class="keyword">this</span>.methodParam);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;</span><br><span class="line">            String method = paramValue.toUpperCase(Locale.ENGLISH);</span><br><span class="line">            <span class="keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;</span><br><span class="line">                requestToUse = <span class="keyword">new</span> HttpMethodRequestWrapper(request, method);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    filterChain.doFilter(requestToUse, response);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Simple &#123;<span class="doctag">@link</span> HttpServletRequest&#125; wrapper that returns the supplied method for</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> HttpServletRequest#getMethod()&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpMethodRequestWrapper</span> <span class="keyword">extends</span> <span class="title">HttpServletRequestWrapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String method;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpMethodRequestWrapper</span><span class="params">(HttpServletRequest request, String method)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(request);</span><br><span class="line">        <span class="keyword">this</span>.method = method;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.method;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpServletRequestWrapper</span> <span class="keyword">extends</span> <span class="title">ServletRequestWrapper</span> <span class="keyword">implements</span> <span class="title">HttpServletRequest</span> </span>&#123;</span><br><span class="line">    、、、</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="从上述源码中可以看到："><a href="#从上述源码中可以看到：" class="headerlink" title="从上述源码中可以看到："></a>从上述源码中可以看到：</h3><p>MVC实现Rest风格的是通过HiddenHttpMethodFilter这个拦截器实现的，在该拦截器的doFilterInternal方法中通过获取到参数中”method”对应的属性值来拿到请求类型，然后调用HttpMethodRequestWrapper构造方法，而HttpMethodRequestWrapper继承了HttpServletRequest可以看出这里其实就是通过传入的request,method两个参数构造了一个request,而method就是我们所传的参数，从而达到对Rest四种请求方式的支持。</p>
<p>@RequestParam(value = “”, required = false, defaultValue = “”)<br>@RequestHeader(value = “”, required = false, defaultValue = “”)<br>@CookieValue(value = “”, required = false)</p>
<p>Spring MVC解决乱码问题<br>处理字符编码的Filter一定要在其他Filter之前，不然其他Filter已经获取的请求参数，此时再去处理字符编码没有任何意义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharacterEncodingFilter</span> <span class="keyword">extends</span> <span class="title">OncePerRequestFilter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">private</span> String encoding;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> forceRequestEncoding = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> forceResponseEncoding = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isForceResponseEncoding</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.forceResponseEncoding;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doFilterInternal</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span></span></span><br><span class="line"><span class="function">            <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        String encoding = getEncoding();</span><br><span class="line">        <span class="keyword">if</span> (encoding != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (isForceRequestEncoding() || request.getCharacterEncoding() == <span class="keyword">null</span>) &#123;</span><br><span class="line">                request.setCharacterEncoding(encoding);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (isForceResponseEncoding()) &#123;</span><br><span class="line">                response.setCharacterEncoding(encoding);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        filterChain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>Spring MVC如何把数据带给页面<br>不管是传入Map, Model, MOdelMap,最终都是BindingAwareModelMap在工作，相当于在BindingAwareModelMap中保存的数据都放在请求域中</p>
]]></content>
      <tags>
        <tag>MVC</tag>
      </tags>
  </entry>
  <entry>
    <title>article_name</title>
    <url>/2021/03/11/article-name/</url>
    <content><![CDATA[<p><img src="/images/MVC%E6%89%A7%E8%A1%8C%E6%B5%81%E7%A8%8B.jpg"></p>
]]></content>
  </entry>
  <entry>
    <title>工厂 + 策略 + 模板方法模式实际应用场景</title>
    <url>/2021/02/17/%E5%B7%A5%E5%8E%82-%E7%AD%96%E7%95%A5-%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F%E5%AE%9E%E9%99%85%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF/</url>
    <content><![CDATA[<p>问题场景：项目中需要实现PC端和APP端推广二维码的功能，其实采用一种简单的实现方式就是使用if-else判断是使用PC端还APP端的逻辑，这种做法虽然可以实现，但是如果再加上Mac端，H5端等等就需要在原代码上添加很多的if,代码看起来很不优雅而且修改了原代码，基于对修改关闭对扩展开放的原则，我使用了工厂模式 + 策略模式 + 模板方法模式来实现这一场景。</p>
<h3 id="设备工厂类"><a href="#设备工厂类" class="headerlink" title="设备工厂类"></a>设备工厂类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeviceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String, AbstractDevice&gt; strategyMap = Maps.newHashMap();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AbstractDevice <span class="title">getInvokeStrategy</span><span class="params">(String deviceName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> strategyMap.get(deviceName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String deviceName, AbstractDevice abstractDevice)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(deviceName) || <span class="keyword">null</span> == abstractDevice) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        strategyMap.put(deviceName, abstractDevice);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象设备类"><a href="#抽象设备类" class="headerlink" title="抽象设备类"></a>抽象设备类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDevice</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LoggerFactory.getLogger(AppHandler.class);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;https://openerp.banksteel.com/m/register.html&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String MOBILE = <span class="string">&quot;mobile&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVITE_CONTENT_UP = <span class="string">&quot;邀请码: &quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String INVITE_CONTENT_DOWN = <span class="string">&quot;邀请人: &quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserInfoService userInfoService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SysConfigService sysConfigService;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InviteResultVO <span class="title">getQRCode</span><span class="params">(InviteUserVO inviteUserVO, String device)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> lixiang</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 根据手机号获取用户信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2021/3/2 18:46</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;UserInfo&gt; <span class="title">getUserInfoByMobile</span><span class="params">(String mobile)</span> </span>&#123;</span><br><span class="line">        SaasParameter.setMemberId(<span class="string">&quot;-1&quot;</span>);</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(MOBILE, mobile);</span><br><span class="line">        <span class="keyword">return</span> userInfoService.queryByMap(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@author</span> lixiang</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Description</span> 获取二维码和邀请链接并封装信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@Date</span> 2021/3/2 18:46</span></span><br><span class="line"><span class="comment">    **/</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InviteResultVO <span class="title">getURLAndAssembleInfo</span><span class="params">(Long userId, String userName, String device)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] logoFileByte;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ClassPathResource classPathResource = <span class="keyword">new</span> ClassPathResource(<span class="string">&quot;image/SaaS-logo.png&quot;</span>);</span><br><span class="line">            logoFileByte = FileCopyUtils.copyToByteArray(classPathResource.getInputStream());</span><br><span class="line">            <span class="keyword">int</span> length = logoFileByte.length;</span><br><span class="line">            logger.info(<span class="string">&quot;=================getInviteQR-errorlength:&#123;&#125;&quot;</span> + length);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">&quot;================getInviteQR-error:&#123;&#125;&quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamsValidException(e);</span><br><span class="line">        &#125;</span><br><span class="line">        String url = URL + <span class="string">&quot;?inviteId=&quot;</span> + userId + <span class="string">&quot;?device=&quot;</span> + device;</span><br><span class="line">        SysConfig envType = sysConfigService.findSysConfigByKey(<span class="string">&quot;environmentType&quot;</span>);</span><br><span class="line">        String value ;</span><br><span class="line">        <span class="keyword">if</span> (envType == <span class="keyword">null</span> ) &#123;</span><br><span class="line">            value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span>  &#123;</span><br><span class="line">            <span class="keyword">if</span> (!org.apache.commons.lang3.StringUtils.isBlank(envType.getValue()) &amp;&amp; envType.getValue().length() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                value = envType.getValue().substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                value = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String qRBase64 = QrCodeUtils.generateQrCodeAsBase64(url, logoFileByte, <span class="string">&quot;     &quot;</span> + INVITE_CONTENT_UP + userId + value, <span class="string">&quot;               &quot;</span>+INVITE_CONTENT_DOWN + userName);</span><br><span class="line">        logger.error(<span class="string">&quot;================getInviteQR-qRBase64:&#123;&#125;&quot;</span>, qRBase64);</span><br><span class="line">        InviteResultVO resultVO = <span class="keyword">new</span> InviteResultVO();</span><br><span class="line">        resultVO.setInviteCode(qRBase64);</span><br><span class="line">        resultVO.setInviteUrl(url);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="APP设备类"><a href="#APP设备类" class="headerlink" title="APP设备类"></a>APP设备类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppHandler</span> <span class="keyword">extends</span> <span class="title">AbstractDevice</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InviteResultVO <span class="title">getQRCode</span><span class="params">(InviteUserVO inviteUserVO, String device)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据手机号获取用户信息</span></span><br><span class="line">        List&lt;UserInfo&gt; userInfos = <span class="keyword">super</span>.getUserInfoByMobile(inviteUserVO.getMobile());</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(userInfos)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ParamsValidException(<span class="string">&quot;获取用户信息异常！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取二维码和邀请链接并封装信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getURLAndAssembleInfo(userInfos.get(<span class="number">0</span>).getId(), userInfos.get(<span class="number">0</span>).getName(), device);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DeviceFactory.register(<span class="string">&quot;app&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PC设备类"><a href="#PC设备类" class="headerlink" title="PC设备类"></a>PC设备类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PcHandler</span> <span class="keyword">extends</span> <span class="title">AbstractDevice</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserRegisterAO userRegisterAO;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InviteResultVO <span class="title">getQRCode</span><span class="params">(InviteUserVO inviteUserVO, String device)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 根据手机号获取用户信息</span></span><br><span class="line">        List&lt;UserInfo&gt; userInfos = <span class="keyword">super</span>.getUserInfoByMobile(inviteUserVO.getMobile());</span><br><span class="line">        Long userId;</span><br><span class="line">        String userName;</span><br><span class="line">        <span class="keyword">if</span> (CollectionUtils.isEmpty(userInfos)) &#123;</span><br><span class="line">            <span class="comment">// 用户不存在，注册用户</span></span><br><span class="line">            userId = userRegisterAO.quickRegister(inviteUserVO);</span><br><span class="line">            userName = inviteUserVO.getUserName();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 用户存在，直接校验</span></span><br><span class="line">            userRegisterAO.checkVerifyCode(inviteUserVO.getImgCheckCode(), inviteUserVO.getImgVerifyCode());</span><br><span class="line">            userRegisterAO.checkMobilCheckCode(inviteUserVO.getMobile(), inviteUserVO.getMobilCheckCode(), SmsConstants.QUICK_MOBILE_CHECKCODE_REGISTER);</span><br><span class="line">            userId = userInfos.get(<span class="number">0</span>).getId();</span><br><span class="line">            userName = userInfos.get(<span class="number">0</span>).getName();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 获取二维码和邀请链接并封装信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getURLAndAssembleInfo(userId, userName, device);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        DeviceFactory.register(<span class="string">&quot;pc&quot;</span>, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用COntroller类"><a href="#调用COntroller类" class="headerlink" title="调用COntroller类"></a>调用COntroller类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &#123;&quot;用户相关&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRegisterController</span> <span class="keyword">extends</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@ResponseBody</span></span><br><span class="line">  	<span class="meta">@RequestMapping(value = &quot;/get/device/inviteQR&quot;, method = RequestMethod.POST)</span></span><br><span class="line">  	<span class="meta">@WriteBuzLog(buzModel = &quot;用户管理&quot;, buzName = &quot;获取二维码&quot;)</span></span><br><span class="line">  	<span class="meta">@ApiOperation(value = &quot;获取PC端和APP端邀请二维码&quot;, httpMethod = &quot;POST&quot;, consumes = &quot;application/json;charset=UTF-8&quot;,notes = &quot;commond命令：get_device_invite_QR&quot;)</span></span><br><span class="line">  	<span class="meta">@PermissionSource(command = &quot;get_device_invite_QR&quot;, level=PermissionLevel.ALL)</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> ResponseEntity&lt;InviteResultVO&gt; <span class="title">getDeviceInviteQR</span><span class="params">(<span class="meta">@RequestBody</span> <span class="meta">@Valid</span> InviteUserVO inviteUserVO, <span class="meta">@ApiParam(name = &quot;device&quot;, value = &quot;PC端或者APP端&quot;,required = true)</span> <span class="meta">@RequestParam</span> String device)</span> </span>&#123;</span><br><span class="line">  		AbstractDevice strategy = DeviceFactory.getInvokeStrategy(device);</span><br><span class="line">  		<span class="keyword">return</span> returnSuccess(<span class="number">200</span>, <span class="string">&quot;生成二维码成功&quot;</span>, strategy.getQRCode(inviteUserVO, device));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p>以上实现方式优点是：如果需要添加一个Mac端只需要添加一个类去继承AbstractDevice就可以做到，无需改动原来的任何代码，符合开闭原则，也去除所有的if-else。<br>上述代码都是一些简单代码，我只是希望通过上面的例子告诉自己在写代码时不要只是单纯的只是想完成功能，而要更多的思考如何去设计代码，使代码更具可扩展性，写出更优雅的代码。</p>
]]></content>
      <categories>
        <category>设计模式</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>李祥，My First Blog</title>
    <url>/2021/02/24/%E6%9D%8E%E7%A5%A5%EF%BC%8CMy-First-Blog/</url>
    <content><![CDATA[<p>stay hungry stay foolish</p>
]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>Spring</tag>
        <tag>Mybatis</tag>
        <tag>Dubbo</tag>
        <tag>Spring Cloud</tag>
        <tag>redis</tag>
        <tag>Elasticsearch</tag>
        <tag>rabbitmq</tag>
      </tags>
  </entry>
</search>
